// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ResetWaveTex
#pragma kernel UpdateWaveTex

#define THREAD_NUM_X 2
#define RIPPLE_TEX_THREAD_X 1024

#include "./RippleStruct.hlsl"

StructuredBuffer<ParticleData> _Particles;
RWTexture2D<float4> _RippleTex;

uint _RippleTextureWidth;
float _NormalizedWaveHalfAmplitude;
float3 _AudioAmplitude;


// 乱数生成
inline float rnd(float2 p){
    return frac(sin(dot(p ,float2(12.9898, 78.233))) * 43758.5453);
}

inline float3 rnd3(float2 p){
	return 2.0 * (float3(rnd(p * 1), rnd(p * 2), rnd(p * 3)) - 0.5);
}


[numthreads(RIPPLE_TEX_THREAD_X, 1, 1)]
void ResetWaveTex (uint3 id : SV_DispatchThreadID)
{
	_RippleTex[id.xy] = float4(0,0,0,1);
}

[numthreads(THREAD_NUM_X, 1, 1)]
void UpdateWaveTex (uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	ParticleData particle = _Particles[idx];
	if (! particle.isActive) { return; }
	int wavePeakPositionX = (int) (particle.position.x * _RippleTextureWidth);
	
	//For debug
	//_RippleTex[uint2(wavePeakPositionX, 0)] = float4(1,1,1,1);
	
	int halfWaveLength = (int) (_NormalizedWaveHalfAmplitude * _RippleTextureWidth);
	uint waveTroughLeftPositionX = wavePeakPositionX - halfWaveLength;
	uint waveTroughRightPositionX = wavePeakPositionX + halfWaveLength;
	
	for(int x = - halfWaveLength; x < halfWaveLength; x++)
	{
		int wavePositionX = wavePeakPositionX + x;
		if (0 <= wavePositionX && wavePositionX < _RippleTextureWidth)
		{
			float rippleAmplitude = smoothstep(waveTroughLeftPositionX, waveTroughRightPositionX, wavePositionX)
				* smoothstep(waveTroughRightPositionX, waveTroughLeftPositionX, wavePositionX);
				
			// age 0: low height, age 0.5: high height, age 1: low height
			float age0to1 = min(particle.age / particle.lifetime, 1);
			float heightBasedOnAge = smoothstep(0, 0.15, age0to1) * smoothstep(1.0, 0.85, age0to1);
			rippleAmplitude = lerp(0, rippleAmplitude, heightBasedOnAge); //actual ripple amplitude

			rippleAmplitude *= lerp(1.0, 1.6, length(particle.velocity)); //high speed makes big wave
				
			// R = ripple amplitude scale, B = audio amplitude
			float4 col = _RippleTex[uint2(wavePositionX, 0)];
			col.r = max(col.r, rippleAmplitude); //波紋の高さ
			col.g = max(col.g, particle.velocity); //波紋の速度
			uint rippleType = particle.pid / 2;
			col.b = max(col.b, rippleType  == 0 ? 0.0 : (rippleType == 1 ? 0.5 : 1.0) ); //ripple type
			_RippleTex[uint2(wavePositionX, 0)] = col;
		}
	}
}